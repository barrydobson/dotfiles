# You can manually run `z4h update` to update everything.
zstyle ':z4h:' auto-update      'yes'
zstyle ':z4h:' auto-update-days '7'

# Move prompt to the bottom when zsh starts and on Ctrl+L.
zstyle ':z4h:' prompt-at-bottom 'yes'

# Keyboard type: 'mac' or 'pc'.
{{- if (eq .osid "darwin") }}
zstyle ':z4h:bindkey' keyboard  'mac'
zstyle ':z4h:' iterm2-integration yes
{{- else }}
zstyle ':z4h:bindkey' keyboard  'pc'
{{- end }}

# zstyle ':z4h:' start-tmux no
zstyle ':z4h:' term-shell-integration yes
zstyle ':z4h:' propagate-cwd          yes

# Right-arrow key accepts one character ('partial-accept') from
# command autosuggestions or the whole thing ('accept')?
zstyle ':z4h:autosuggestions' forward-char 'accept'

# Recursively traverse directories when TAB-completing files.
zstyle ':z4h:fzf-complete' recurse-dirs 'no'

# Enable direnv to automatically source .envrc files.
zstyle ':z4h:direnv'         enable 'no'
# Show "loading" and "unloading" notifications from direnv.
zstyle ':z4h:direnv:success' notify 'no'

# Start ssh-agent if it's not running yet.
zstyle ':z4h:ssh-agent:' start 'yes'
zstyle ':z4h:ssh-agent:' extra-args -t 20h

# Customize FZF
zstyle ':z4h:*' fzf-flags --prompt='» ' --pointer='▶' --marker='✓ ' --color=bg+:-1,marker:010

# Clone additional Git repositories from GitHub.
#
# This doesn't do anything apart from cloning the repository and keeping it
# up-to-date. Cloned files can be used after `z4h init`. This is just an
# example. If you don't plan to use Oh My Zsh, delete this line.
z4h install ohmyzsh/ohmyzsh || return
z4h install mroth/evalcache || return
z4h install olets/zsh-abbr || return

# Install or update core components (fzf, zsh-autosuggestions, etc.) and
# initialize Zsh. After this point console I/O is unavailable until Zsh
# is fully initialized. Everything that requires user interaction or can
# perform network I/O must be done above. Everything else is best done below.
z4h init || return

# Export environment variables.
z4h source $HOME/.config/shell/exports.sh

# Set colors from LS_COLORS
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Extend function path
fpath=(
    $ZDOTDIR/completions
    $ASDF_DATA_DIR/completions
    $fpath
)

# Use additional Git repositories pulled in with `z4h install`.
z4h source ohmyzsh/ohmyzsh/lib/clipboard.zsh
z4h source ohmyzsh/ohmyzsh/lib/directories.zsh

# kubectl completions
mkdir -p "$ZSH_CACHE_DIR/completions"

{{- if eq .osid "darwin" }}
z4h load ohmyzsh/ohmyzsh/plugins/brew
{{- end }}
{{- if or (lookPath "op") }}
z4h load ohmyzsh/ohmyzsh/plugins/1password
{{- end }}
z4h load ohmyzsh/ohmyzsh/plugins/encode64
z4h load ohmyzsh/ohmyzsh/plugins/extract
z4h load ohmyzsh/ohmyzsh/plugins/git
z4h load ohmyzsh/ohmyzsh/plugins/gpg-agent
{{- if or (lookPath "kubectl") }}
z4h load ohmyzsh/ohmyzsh/plugins/kubectl
{{- end }}
z4h load ohmyzsh/ohmyzsh/plugins/sudo
{{- if or (lookPath "terraform") }}
z4h load ohmyzsh/ohmyzsh/plugins/terraform
{{- end }}
{{- if or (lookPath "eza") }}
z4h load ohmyzsh/ohmyzsh/plugins/eza
{{- end }}
{{- if or (lookPath "asdf") }}
z4h load ohmyzsh/ohmyzsh/plugins/asdf
{{- end }}
{{- if or (lookPath "aws") }}
z4h load ohmyzsh/ohmyzsh/plugins/aws
{{- end }}

z4h load mroth/evalcache
z4h load olets/zsh-abbr

fpath=( $HOME/.config/shell/functions "${fpath[@]}" )

if [[ -d $HOME/.config/shell/functions ]]; then
  for func in $HOME/.config/shell/functions/*(:t); autoload -U $func
fi

# Define key bindings.
z4h bindkey z4h-cd-back            Shift+Left   # cd into the previous directory
z4h bindkey z4h-cd-forward         Shift+Right  # cd into the next directory
z4h bindkey z4h-cd-up              Shift+Up     # cd into the parent directory
z4h bindkey z4h-fzf-dir-history    Shift+Down   # cd into a child directory

# Autoload functions.
autoload -Uz zmv

# Define aliases.
z4h source $HOME/.config/shell/aliases.sh

# Define named directories: ~w <=> Windows home directory on WSL.
(( $+z4h_win_home )) && hash -d w=$z4h_win_home

# Set shell options: http://zsh.sourceforge.net/Doc/Release/Options.html.
setopt glob_dots     # no special treatment for file names with a leading dot
setopt no_auto_menu  # require an extra TAB press to open the completion menu

# History
# https://unix.stackexchange.com/questions/273861/unlimited-history-in-zsh
HISTSIZE=10000000
SAVEHIST=10000000
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

# Remove slow command not found handler
[[ ! -v functions[command_not_found_handler] ]] || unfunction command_not_found_handler

# Load direnv
if command -v direnv >/dev/null 2>&1; then
  _evalcache direnv hook zsh
fi

{{ if eq .chezmoi.os "darwin" -}}
# OrbStack: command-line tools and integration
source "$HOME/.orbstack/shell/init.zsh" 2>/dev/null || :
{{- end }}

### Fix slowness of pastes with zsh-syntax-highlighting.zsh
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic
}

pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish

# Load local configuration.
z4h source $ZDOTDIR/.zshrc.local
